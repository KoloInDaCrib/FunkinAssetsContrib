
import funkin.play.character.SparrowCharacter;
import funkin.play.character.CharacterType;
import funkin.play.PlayState;
import flixel.FlxG;
import flixel.FlxSprite;
import flixel.group.FlxTypedSpriteGroup;
import flixel.util.FlxSort;
import funkin.Conductor;
import funkin.util.SortUtil;
import funkin.play.PlayState;
import flixel.group.FlxTypedSpriteGroup;
import funkin.graphics.FunkinSprite;
import funkin.modding.base.ScriptedFlxAtlasSprite;
import funkin.modding.base.ScriptedFlxSprite;
import funkin.modding.base.ScriptedFlxSpriteGroup;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import funkin.audio.visualize.ABotVis;
import funkin.graphics.shaders.DropShadowShader;
import funkin.graphics.shaders.AdjustColorShader;
import Lambda;

class OtisSpeakerCharacter extends SparrowCharacter {

	var shootTimes:Array<Float> = [];
	var shootDirs:Array<Int> = [];

	var muzzleFlash:FlxSprite;

	function new() {
		super('otis-speaker');

    ignoreExclusionPref.push("shoot1");
		ignoreExclusionPref.push("shoot2");
		ignoreExclusionPref.push("shoot3");
		ignoreExclusionPref.push("shoot4");
	}

	var adjustColor:AdjustColorShader;
	var vizAdjustColor:AdjustColorShader;

	override function onCreate(event:ScriptEvent):Void
  {
		super.onCreate(event);

		this.playAnimation('idle', true, true);

		muzzleFlash = new FlxSprite(0, 0);
		muzzleFlash.frames = Paths.getSparrowAtlas("erect/otis_flashes");
		muzzleFlash.animation.addByPrefix('shoot1', 'shoot back0', 24, false);
		muzzleFlash.animation.addByPrefix('shoot2', 'shoot back low0', 24, false);
		muzzleFlash.animation.addByPrefix('shoot3', 'shoot forward0', 24, false);
		muzzleFlash.animation.addByPrefix('shoot4', 'shoot forward low0', 24, false);

		muzzleFlash.animation.onFrameChange.add(function() {
			updateMuzzle();
    });

		initTimemap();
	}

	override function onAdd(event:ScriptEvent)
	{
		super.onAdd(event);

		// Speakers are created after the character, but added before it.

		adjustColor = new AdjustColorShader();

    adjustColor.hue = -10;
    adjustColor.saturation = -20;
    adjustColor.brightness = -30;
    adjustColor.contrast = -25;

		vizAdjustColor = new AdjustColorShader();

		vizAdjustColor.brightness = -12;
    vizAdjustColor.hue = -30;
    vizAdjustColor.contrast = 0;
		vizAdjustColor.saturation = -10;

		PlayState.instance.currentStage.getBoombox().scriptGet("pupil").shader = adjustColor;
		PlayState.instance.currentStage.getBoombox().scriptGet("abot").shader = adjustColor;

		var members = PlayState.instance.currentStage.getBoombox().scriptGet("abotViz").members;
		for (spr in members){
			spr.shader = vizAdjustColor;
		}
	}

	function updateMuzzle(){
		if(muzzleFlash.animation.curAnim.curFrame > 1){
			muzzleFlash.blend = null;
		}

		muzzleFlash.visible = !muzzleFlash.animation.finished;
	}

	function reset():Void
	{
		initTimemap();
	}

	function initTimemap():Void
	{
		trace('Initializing Otis timings...');
		shootTimes = [];
		// The tankmen's timings and directions are determined
		// by the chart, specifically the internal "picospeaker" difficulty.
		var animChart:SongDifficulty = PlayState.instance.currentSong.getDifficulty('picospeaker', PlayState.instance.currentVariation);
		if (animChart == null)
		{
			trace('Initializing Otis (speaker) failed; no `picospeaker` chart found for this song.');
			return;
		} else {
			trace('Initializing Otis (speaker); found `picospeaker` chart, continuing...');
		}
		var animNotes:Array<SongNoteData> = animChart.notes;

		// turns out sorting functions are completely useless in polymod right now and do nothing
		// i had to sort the whole pico chart by hand im gonna go insane
		animNotes.sort(function(a:SongNoteData, b:SongNoteData):Int
  	{
    	return FlxSort.byValues(FlxSort.ASCENDING, a.time, b.time);
  	});

		for (note in animNotes)
		{
			shootTimes.push(note.time);
			shootDirs.push(note.data);
		}
	}

	override function onUpdate(event:UpdateScriptEvent):Void
	{
		super.onUpdate(event);

		// Set the visibility of ABot to match Nene's.
		if (PlayState.instance.currentStage.getBoombox() != null)
		{
			PlayState.instance.currentStage.getBoombox().visible = this.visible;
		}

    // Each Pico animation is shifted from the array when it's time to play it.
		if (shootTimes.length > 0 && shootTimes[0] <= Conductor.instance.songPosition) {
			var nextTime:Float = shootTimes.shift();
			var nextDir:Int = shootDirs.shift();

			playPicoAnimation(nextDir);
		}
	}

	function playPicoAnimation(direction:Int):Void
  {
		muzzleFlash.blend = 0;
		switch (direction) {
			case 0:
				this.playAnimation('shoot1', true, true);
				muzzleFlash.setPosition(this.x + 590, this.y - 130);
				muzzleFlash.animation.play('shoot1', true);
			case 1:
				this.playAnimation('shoot2', true, true);
				muzzleFlash.setPosition(this.x + 620, this.y - 170);
				muzzleFlash.animation.play('shoot2', true);
			case 2:
				this.playAnimation('shoot3', true, true);
				muzzleFlash.setPosition(this.x - 560, this.y - 190);
				muzzleFlash.animation.play('shoot3', true);
			case 3:
				this.playAnimation('shoot4', true, true);
				muzzleFlash.setPosition(this.x - 520, this.y - 230);
				muzzleFlash.animation.play('shoot4', true);
		}
	}
}
